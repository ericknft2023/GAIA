import requests
import random
import time
import logging
from typing import List, Dict
import sqlite3
from concurrent.futures import ThreadPoolExecutor, as_completed

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("chatbot.log"),
        logging.StreamHandler()
    ]
)

# Configuration
BASE_URL = "https://pengu.gaia.domains"
MODEL = "qwen2-0.5b-instruct"
MAX_RETRIES = 100  # Essentially infinite retries
RETRY_DELAY = 5  # Seconds between retries
QUESTION_DELAY = 1  # Seconds between successful questions

# Database setup
def setup_database():
    conn = sqlite3.connect('chatbot_cache.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS responses
                 (question TEXT PRIMARY KEY, response TEXT)''')
    conn.commit()
    return conn

# Cache responses
def cache_response(conn, question: str, response: str):
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO responses (question, response) VALUES (?, ?)", (question, response))
    conn.commit()

def get_cached_response(conn, question: str) -> str:
    c = conn.cursor()
    c.execute("SELECT response FROM responses WHERE question=?", (question,))
    result = c.fetchone()
    return result[0] if result else None

# Chat with AI
def chat_with_ai(api_key: str, question: str) -> str:
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    messages = [
        {"role": "user", "content": question}
    ]

    data = {
        "model": MODEL,
        "messages": messages,
        "temperature": 0.7
    }

    for attempt in range(MAX_RETRIES):
        try:
            logging.info(f"Attempt {attempt+1} for question: {question[:50]}...")
            response = requests.post(
                f"{BASE_URL}/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )

            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]

            logging.warning(f"API Error ({response.status_code}): {response.text}")
            time.sleep(RETRY_DELAY)

        except Exception as e:
            logging.error(f"Request failed: {str(e)}")
            time.sleep(RETRY_DELAY)

    raise Exception("Max retries exceeded")

def process_question(api_key: str, question: str, conn):
    cached_response = get_cached_response(conn, question)
    if cached_response:
        logging.info(f"Using cached response for: {question[:50]}...")
        return cached_response

    response = chat_with_ai(api_key, question)
    cache_response(conn, question, response)
    return response

def run_bot(api_key: str):
    conn = setup_database()
    while True:  # Outer loop to repeat the questions indefinitely
        random.shuffle(QUESTIONS)
        logging.info(f"Starting chatbot with {len(QUESTIONS)} questions in random order")

        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = {executor.submit(process_question, api_key, question, conn): question for question in QUESTIONS}
            for future in as_completed(futures):
                question = futures[future]
                try:
                    response = future.result()
                    print(f"Answer to '{question[:50]}...':\n{response}")
                    logging.info(f"Received full response for: {question[:50]}...")
                except Exception as e:
                    logging.error(f"Failed to process question: {str(e)}")

        time.sleep(QUESTION_DELAY)  # Wait before asking next question

def main():
    print("Title: GaiaAI Chatbot")
    print("Twitter: https://x.com/0xMoei")
    api_key = input("Enter your API key: ")
    run_bot(api_key)

if __name__ == "__main__":
    main()
